<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Document1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>//Ã¨ un livello basato sul completarlo
for colonne in 0 ... 4 {
    for righe in -5 ... -2 {
        world.place(Block(), at: Coordinate(column: colonne, row: righe))
    }
}

for colonne in 8 ... 11 {
    for righe in 13 ... 15 {
        world.place(Block(), at: Coordinate(column: colonne, row: righe))
    }
}
let allCoordinates = world.allPossibleCoordinates
var heights: [Int] = []

var island : [Coordinate] = []
var sea : [Coordinate] = []


for i in 1 ... 20 {
    let localnumber = randomInt(from: 0, to: 12)
    heights.append(localnumber)
}

for coordinate in allCoordinates {
    if coordinate.column &gt; 2 &amp;&amp; coordinate.column &lt; 9 &amp;&amp; coordinate.row &gt; 2 &amp;&amp; 
        coordinate.row &lt; 9
    {
        island.append(coordinate)
    } else {
        sea.append(coordinate
        )
    }
}
var index = 0
for coordinate in island {
    if index == heights.count {
        index = 0
    }
    var currentHeight = heights[index]
    if currentHeight == 0 {
    } else {
        for i in 1...currentHeight {
            world.place(Block(), at: coordinate)
        }
        if currentHeight &gt; 10 {
        } else if coordinate.column &gt;= 3 &amp;&amp; coordinate.column &lt; 6 {
        }
    }
    index += 1
}
for coordiante in sea {
    world.removeBlock(atColumn: coordiante.column, row: coordiante.row)
    world.place(Water(), at: coordiante)
    
}

let portal = Portal(color:#colorLiteral(red: 0.21960784494876862, green: 0.007843137718737125, blue: 0.8549019694328308, alpha: 1.0) )
world.place(portal, atStartColumn: 0,startRow: -4, atEndColumn: 11,endRow: 15)
let platformlockred = PlatformLock(color: #colorLiteral(red: 0.7450980544090271, green: 0.1568627506494522, blue: 0.07450980693101883, alpha: 1.0))
world.place(platformlockred, at: Coordinate(column: 8, row: 15))

world.place(Platform(onLevel: 1, controlledBy: platformlockred), at: Coordinate(column: 8, row: 12
))
let expert = Expert()
world.place(expert, at: Coordinate(column: 8, row: 14))
let byte = Character(name: .byte)
world.place(byte, at: Coordinate(column: 4, row: -2))
let platformlockred1 = PlatformLock(color: #colorLiteral(red: 0.34117648005485535, green: 0.6235294342041016, blue: 0.16862745583057404, alpha: 1.0))
world.place(platformlockred1, at: Coordinate(column: 9, row: 15))

world.place(Platform(onLevel: 1, controlledBy: platformlockred1), at: Coordinate(column: 8, row: 11
))
let platformlockred2 = PlatformLock(color: #colorLiteral(red: 0.9607843160629272, green: 0.7058823704719543, blue: 0.20000000298023224, alpha: 1.0))
world.place(platformlockred2, at: Coordinate(column: 10, row: 15))

world.place(Platform(onLevel: 1, controlledBy: platformlockred2), at: Coordinate(column: 8, row: 10
))
let platformlockred3 = PlatformLock(color: #colorLiteral(red: 0.239215686917305, green: 0.6745098233222961, blue: 0.9686274528503418, alpha: 1.0))
world.place(platformlockred3, at: Coordinate(column: 11, row: 13))

world.place(Platform(onLevel: 1, controlledBy: platformlockred3), at: Coordinate(column: 8, row: 9
))
let gem = Gem()
world.place(gem, at: Coordinate(column: 8, row: 9))
let gemcuonter = 1
//completa il livello 
</string>
			<key>ModifiedRange</key>
			<string>{2545, 3109}</string>
			<key>OriginalContent</key>
			<string>let hopper = Character(name: .hopper)
world.place(hopper, at: Coordinate(column: 1, row: 1))
</string>
			<key>OriginalRange</key>
			<string>{2545, 93}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
