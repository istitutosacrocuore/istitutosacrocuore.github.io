<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Document1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>//Paolo Mangiapia
//*Questo livello è stato creato per mettere alla prova tutti coloro che volessero imparare a programmare tramite le funzioni provenienti da Impara a progammare 1 e 2.L'obiettivo dell'utente è quello di prendere tutte le gemme e accendere tutti gli interruttori. È stato diviso in quattro parti, due affidate a Byte e due ad expert. Quello che per prima si viene a creare è un terreno basato sul livello terre casuali di impara a programmare 2 ed è il punto di partenza di Byte; la seconda è una montagna che byte dovrà scalare per prendere la gemma. La terza parte è una colonna di la cui scala per arrivarci si è rotta e grazie ad Expert e alla sua abiltà bisognerà ristabilire il percorso. L'ultima parte a doversi creare è il punto di partenza di Expert che consiste in un labirinto.
//spazio per le variabili e le costanti
let platformlockRed = PlatformLock(color: #colorLiteral(red: 0.7450980544090271, green: 0.1568627506494522, blue: 0.07450980693101883, alpha: 1.0))
let expert = Expert()
let orangeportal = Portal(color: #colorLiteral(red: 0.9372549057006836, green: 0.3490196168422699, blue: 0.1921568661928177, alpha: 1.0))
let redportal = Portal(color: #colorLiteral(red: 0.7450980544090271, green: 0.1568627506494522, blue: 0.07450980693101883, alpha: 1.0))
let blackportal = Portal(color: #colorLiteral(red: 0.0, green: 0.0, blue: 0.0, alpha: 1.0))
let coordinate1 = world.coordinates(inColumns: [0,1,2,3,4,5,6,7,8,9,10,11], intersectingRows: [4,5,6,7])
for coordinate in coordinate1{
    world.removeBlock(at:coordinate)
    world.placeWater(at: [coordinate])
}
let coordinate2 = world.coordinates(inColumns: [8,9,10,11], intersectingRows: [0])
let coordinate3 = world.coordinates(inColumns: [9,10,11], intersectingRows: [1])
let coordinate4 = world.coordinates(inColumns: [10,11], intersectingRows: [2])
let coordinate5 = world.coordinates(inColumns: [4,5,6,7], intersectingRows: [0,1,2,3,4,5,6,7,8,9,10,11])
let coordinate6 = world.coordinates(inColumns: [8,9,10,11], intersectingRows: [8,9,10,11])
let coordinate7 = world.coordinates(inColumns: [0,1,2], intersectingRows: [0,1,2])
let coordinate8 = world.coordinates(inColumns: [0,1,2,3], intersectingRows: [11,10,9,8])
let coordinate9 = world.coordinates(inColumns: [5,6], intersectingRows: [0,1,2,3,4,5,6,7,8,9,10,11])
let coordinate10 = world.coordinates(inColumns: [0,1,2,3,4,5,6,7,8,9,10,11],intersectingRows: [5,6])
var heights: [Int] = [1,2,3,4]
var heights2: [Int] = [1,2,3]
var heights3: [Int] = []
let allCoordinates = world.allPossibleCoordinates
//creazione terre casuali
var index = 0
for i in 1 ... 9 {
    let localnumber = randomInt(from: 1, to: 2)
    heights3.append(localnumber)
}

var index2 : Int = 0
for coordinate in coordinate6 {
    let height = coordinate.column + coordinate.row
    if index2 == heights3.count {
        index2 = 0
        
    }
    var currentHeight3 = heights3[index2]
    for i in 1 ... currentHeight3 {
        world.placeBlocks(at: [coordinate])
    }
    index2 += 1
}
world.place(Switch(), at: Coordinate(column: 11, row: 11))
// creazione montagna

for coordinate in coordinate2 {
    if index == heights.count {
        index = 0
    }
    for i in 1...heights[index] {
        
        world.place(Block(), at: coordinate)
    }
    index += 1
    if index == heights.count {
        index = 0
    }
    
}
for coordinate in coordinate3 {
    if index == heights.count {
        index = 0
    }
    for i in 1...heights[index] {
        
        world.place(Block(), at: coordinate)
    }
    
    index += 1
    if index == heights.count {
        index = 0
    }
    
}
for coordinate in coordinate4 {
    if index == heights2.count {
        index = 0
    }
    for i in 1...heights2[index] {
        
        world.place(Block(), at: coordinate)
    }
    index += 1
    if index == heights2.count {
        index = 0
    }
    
}

world.placeBlocks(at: [Coordinate(column: 11, row: 3)])
//creazione fiumi
for coordinate in coordinate5{
    world.removeBlock(at: coordinate)
    world.placeWater(at: [coordinate])
}
world.placeGems(at: [Coordinate(column: 11, row: 0)])
//creazione pilone
for coordinate in coordinate7 {
    
    for i in 1 ... 9 {
        world.placeBlocks(at: [coordinate])
    }
    
    
}
//creazione scalinata
world.placeBlocks(at: [Coordinate(column: 0, row: 3)])
for i in 1 ... 2 {
    world.placeBlocks(at: [Coordinate(column: 1, row: 3)])
}
for i in 1 ... 3 {
    world.placeBlocks(at: [Coordinate(column: 2, row: 3)])
}
for i in 1 ... 4 {
    world.placeBlocks(at: [Coordinate(column: 3, row: 3)])
}
for i in 1 ... 5 {
    world.placeBlocks(at: [Coordinate(column: 3, row: 2)])
}
for i in 1 ... 6 {
    world.placeBlocks(at: [Coordinate(column: 3, row: 1)])
}

world.removeBlock(atColumn: 2, row: 0)
world.placeGems(at: [Coordinate(column: 0, row: 2)])
//creazione labirinto
for coordinate in coordinate8 {
    
    
    for i in 1 ... 2 {
        world.placeBlocks(at: [coordinate])
    }
    
    world.place(Wall(), at: Coordinate(column: 0, row: 10))
    world.place(Wall(), at: Coordinate(column: 1, row: 10))
    world.place(Wall(), at: Coordinate(column: 2, row: 10))
    world.place(Wall(),facing: east, at: Coordinate(column: 3, row: 10))
    world.place(Wall(), at: Coordinate(column: 2, row: 9))
    world.place(Wall(), at: Coordinate(column: 1, row: 9))
    world.place(Wall(), at: Coordinate(column: 0, row: 9))
    world.place(Wall(), at: Coordinate(column: 1, row: 8))
    world.place(Wall(), at: Coordinate(column: 2, row: 8))
    world.place(Wall(), at: Coordinate(column: 3, row: 8))
}
//finalizzazione
world.place(orangeportal, atStartColumn: 3, startRow: 8, atEndColumn: 0, endRow: 3)
for i in 1 ... 5 {
    world.place(Block(), at: Coordinate(column: 4, row: 3))
}

orangeportal.isActive = true
world.place(blackportal, atStartColumn: 11, startRow: 10 , atEndColumn: 8, endRow: 3)
blackportal.isActive = true
world.place(expert,facing: east, at: Coordinate(column: 0, row: 11))
world.place(platformlockRed,facing: west, at: Coordinate(column: 4, row: 3))
world.place(Platform(onLevel: 2, controlledBy: platformlockRed), at: Coordinate(column: 3, row: 0))
for coordinate in coordinate9 {
    world.place(Block(), at: coordinate)
}
for coordinate in coordinate10{
    world.place(Block(), at: coordinate)
}
let byte = Character(name: .byte)
world.place(byte, at: Coordinate(column: 8, row: 8))

//da qui l'utente dovrà iniziare a risolvere il livello
</string>
			<key>ModifiedRange</key>
			<string>{2545, 6444}</string>
			<key>OriginalContent</key>
			<string>let hopper = Character(name: .hopper)
world.place(hopper, at: Coordinate(column: 1, row: 1))
</string>
			<key>OriginalRange</key>
			<string>{2545, 93}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
