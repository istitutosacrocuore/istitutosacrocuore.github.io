<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Document1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>let byte = Character(name: .byte)
let allCoordinates = world.allPossibleCoordinates
var island :[Coordinate] = []
var sea : [Coordinate] = []
for coordinate in allCoordinates {
    
    
    world.removeAllBlocks(at: coordinate)
    
    for i in 1 ... 3 {
        if coordinate.column &gt; 6 &amp;&amp; coordinate.row &gt;  4 &amp;&amp; coordinate.row &lt; 10  {
            island.append(coordinate)
        }
        
        if coordinate.column &gt; 6 &amp;&amp; coordinate.row &lt; 3 &amp;&amp; coordinate.row &lt; 10 {
            island.append(coordinate)
        }
        if coordinate.column &gt; 3 &amp;&amp; coordinate.row &gt; 6 &amp;&amp; coordinate.row &lt; 10 {
            island.append(coordinate)
        }
        
        
        if coordinate.column &lt;    3 &amp;&amp;  coordinate.row &gt; 6 &amp;&amp; coordinate.row &lt; 10
            
        {
            
            
            
            
            island.append(coordinate)
        } else {
            
            
            sea.append(coordinate)
        }
    }
}




for allCoordinate in island {
    world.place(Block(), at: allCoordinate)
}


for coordinate in sea {
    
    world.place(Water(), at: coordinate)
    
}
world.place(Block(), at: Coordinate(column: 6, row: 9))
world.place(Stair(),facing: west, at: Coordinate(column: 5, row: 9))
world.place(Block(), at: Coordinate(column: 6, row: 8))
world.place(Stair(),facing: north, at: Coordinate(column: 6, row: 8))
for i in 1 ... 2 {
    world.place(Block(), at: Coordinate(column: 6, row: 7))
    
}
world.place(Stair(),facing: north, at: Coordinate(column: 6, row: 7))
world.place(Block(), at: Coordinate(column: 2
    , row: 3))
world.placeBlocks(at: [Coordinate(column: 1,row : 3)])
world.place(Portal(color:  #colorLiteral(red: 0.9254902005195618, green: 0.23529411852359772, blue: 0.10196078568696976, alpha: 1.0)), between: Coordinate(column: 8, row: 1), and: Coordinate(column: 2, row: 3))
world.place(Portal(color:  #colorLiteral(red: 0.46666666865348816, green: 0.7647058963775635, blue: 0.2666666805744171, alpha: 1.0)), between: Coordinate(column: 1, row: 3), and: Coordinate(column: 4, row: 9))
world.place(byte,facing : west, at: Coordinate(column: 9, row: 1))
world.placeGems(at: [Coordinate(column: 6, row: 7)])
world.place(Switch(), at: Coordinate(column: 9, row: 7))
byte.move(distance: 2)
byte.turnRight()
byte.turnRight()
while !byte.isOnGem {
    byte.moveForward()
    if byte.isBlocked {
        byte.turnRight()
        
    }
    
    
    
}
if byte.isOnGem {
    byte.collectGem()
    byte.turnLeft()
    byte.turnLeft()
    
    
}
while !byte.isOnClosedSwitch {
    byte.moveForward()
}
if byte.isOnClosedSwitch {
    byte.toggleSwitch()
}
</string>
			<key>ModifiedRange</key>
			<string>{2545, 2625}</string>
			<key>OriginalContent</key>
			<string>let hopper = Character(name: .hopper)
world.place(hopper, at: Coordinate(column: 1, row: 1))
</string>
			<key>OriginalRange</key>
			<string>{2545, 93}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
