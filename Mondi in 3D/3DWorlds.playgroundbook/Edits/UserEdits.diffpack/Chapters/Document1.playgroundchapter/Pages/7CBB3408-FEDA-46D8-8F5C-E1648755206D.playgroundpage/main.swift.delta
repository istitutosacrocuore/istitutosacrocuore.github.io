<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Document1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>// Sandro Chen Jie
// in questo livello bello e facile, dovete prendere tutte le gemme anche se avete difficolt√† di prendere le gemme, e buon lavoro.

// mettendo i blocchi.

for colonne in 0 ... 3 {
    for righe in -5 ... -2 {
        world.place(Block(), at: Coordinate(column: colonne, row: righe))
    }
}

for colonne in 8 ... 11 {
    for righe in 13 ... 16 {
        world.place(Block(), at: Coordinate(column: colonne, row: righe))
    }
}
let allCordinate = world.allPossibleCoordinates
world.place(Block(), at: Coordinate(column: 12, row: 0))
world.place( Block(), at: Coordinate(column: 13, row: 0))
world.place( Block(), at: Coordinate(column: 14, row: 0))
world.place( Block(), at: Coordinate(column: 12, row: 11))
world.place( Block(), at: Coordinate(column: 13, row: 11))
world.place( Block(), at: Coordinate(column: 14, row: 11))
world.place( Block(), at: Coordinate(column: -1, row: 11))
world.place( Block(), at: Coordinate(column: -2, row: 11))
world.place( Block(), at: Coordinate(column: -3, row: 11))
world.place( Block(), at: Coordinate(column: -1, row: 0))
world.place( Block(), at: Coordinate(column: -2, row: 0))
world.place( Block(), at: Coordinate(column: -3, row: 0))

// mettendo e eliminando i blocchi.

for colonne in 2 ... 9  {
    for righe in 2 ... 9 {
        world.place(Block(), at: Coordinate(column: colonne, row: righe))
    }
    
}
for colonne in 0 ... 2 {
    for righe in 0 ... 11 {
        world.removeBlock(atColumn: colonne, row: righe)
    }
    
}
for colonne in 9 ... 11 {
    for righe in 0 ... 11 {
        world.removeBlock(atColumn: colonne, row: righe)
    }
    
}
for colonne in 3 ... 8 {
    for righe in 0 ... 2 {
        world.removeBlock(atColumn: colonne, row: righe)
    }
    
}
for colonne in 3 ... 8 {
    for righe in 9 ... 11 {
        world.removeBlock(atColumn: colonne, row: righe)
    }
    
}
for colonne in 3 ... 8 {
    for righe in 0 ... 2 {
        world.place(Water(), at: Coordinate(column: colonne, row: righe))
    }
    
}
for colonne in 0 ... 2 {
    for righe in 0 ... 11 {
        world.place(Water(), at: Coordinate(column: colonne, row: righe))
    }
    
}
for colonne in 9 ... 11 {
    for righe in 0 ... 11 {
        world.place(Water(), at: Coordinate(column: colonne, row: righe))
    }
    
}

for colonne in 3 ... 8 {
    for righe in 9 ... 11 {
        world.place(Water(), at: Coordinate(column: colonne, row: righe))
    }
    
}
for colonne in 4 ... 7  {
    for righe in 4 ... 7 {
        world.place(Block(), at: Coordinate(column: colonne, row: righe))
    }
    
}
for colonne in 5 ... 6  {
    for righe in 5 ... 6 {
        world.place(Block(), at: Coordinate(column: colonne, row: righe))
    }
    
}
for colonne in 1 ... 2  {
    for righe in -4 ... -3 {
        world.place(Block(), at: Coordinate(column: colonne, row: righe))
    }
    
}
for colonne in 9 ... 10  {
    for righe in 14 ... 15 {
        world.place(Block(), at: Coordinate(column: colonne, row: righe))
    }
    
}

// mettendo le porte.

world.place(Portal(color: #colorLiteral(red: 0.25882354378700256, green: 0.7568627595901489, blue: 0.9686274528503418, alpha: 1.0)), between: Coordinate(column: 2, row: 9), and: Coordinate(column: 9, row: 2))
world.place(Portal(color: #colorLiteral(red: 0.5843137502670288, green: 0.8235294222831726, blue: 0.41960784792900085, alpha: 1.0)), between: Coordinate(column: 9, row: 9), and: Coordinate(column: 2, row: 2))
world.place(Portal(color: #colorLiteral(red: 0.364705890417099, green: 0.06666667014360428, blue: 0.9686274528503418, alpha: 1.0)), between: Coordinate(column: 8, row: 8), and: Coordinate(column: 3, row: 3))
world.place(Portal(color: #colorLiteral(red: 0.8549019694328308, green: 0.250980406999588, blue: 0.47843137383461, alpha: 1.0)), between: Coordinate(column: 3, row: 8), and: Coordinate(column: 8, row: 3))
world.place(Portal(color: #colorLiteral(red: 0.9411764740943909, green: 0.49803921580314636, blue: 0.3529411852359772, alpha: 1.0)), between: Coordinate(column: 7, row: 7), and: Coordinate(column: 4, row: 4))
world.place(Portal(color: #colorLiteral(red: 0.9686274528503418, green: 0.7803921699523926, blue: 0.3450980484485626, alpha: 1.0)), between: Coordinate(column: 7, row: 4), and: Coordinate(column: 4, row: 7))
world.place(Portal(color: #colorLiteral(red: 0.9254902005195618, green: 0.23529411852359772, blue: 0.10196078568696976, alpha: 1.0)), between: Coordinate(column: 6, row: 5), and: Coordinate(column: 5, row: 6))
world.place(Portal(color: #colorLiteral(red: 0.1764705926179886, green: 0.49803921580314636, blue: 0.7568627595901489, alpha: 1.0)), between: Coordinate(column: 5, row: 5), and: Coordinate(column: 6, row: 6))

// mettendo i blocchi.

for colonne in 8 ... 11 {
    for righe in 13 ... 13 {
        for i in 1 ... 5 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in 11 ... 11 {
    for righe in 14 ... 16 {
        for i in 1 ... 5 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}

for colonne in 8 ... 8 {
    for righe in 14 ... 16 {
        for i in 1 ... 5 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in 9 ... 10 {
    for righe in 16 ... 16 {
        for i in 1 ... 5 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}

for colonne in 0 ... 3 {
    for righe in -2 ... -2 {
        for i in 1 ... 5 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in 0 ... 0 {
    for righe in -5 ... -3 {
        for i in 1 ... 5 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in 1 ... 2 {
    for righe in -5 ... -5 {
        for i in 1 ... 5 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in 3 ... 3 {
    for righe in -5 ... -3 {
        for i in 1 ... 5 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}

// mettendo la porta.

world.place(Gem(), at: Coordinate(column: 10, row: 15))
world.place(Portal(color: #colorLiteral(red: 0.09019608050584793, green: 0.13333334028720856, blue: 0.03921568766236305, alpha: 1.0)), between: Coordinate(column: 2, row: -3), and: Coordinate(column: 9, row: 14))
//mettendo i blocchi
for colonne in 12 ... 14 {
    for righe in 11 ... 11 {
        for i in 1 ... 10 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in 12 ... 14 {
    for righe in 0 ... 0 {
        for i in 1 ... 10 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in -3 ... -1 {
    for righe in 11 ... 11 {
        for i in 1 ... 10 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}

for colonne in -3 ... -1 {
    for righe in 0 ... 0 {
        for i in 1 ... 10 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in 14 ... 14 {
    for righe in 1 ... 10 {
        for i in 1 ... 11 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in -3 ... -3 {
    for righe in 1 ... 10 {
        for i in 1 ... 11 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in 12 ... 12 {
    for righe in 12 ... 17 {
        for i in 1 ... 11 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in 7 ... 11 {
    for righe in 17 ... 17 {
        for i in 1 ... 11 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in 7 ... 7 {
    for righe in 12 ... 16 {
        for i in 1 ... 11 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in -1 ... 6 {
    for righe in 12 ... 12 {
        for i in 1 ... 11 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in -1 ... -1 {
    for righe in -6 ... -1 {
        for i in 1 ... 11 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in 0 ... 4 {
    for righe in -6 ... -6 {
        for i in 1 ... 11 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in 4 ... 4 {
    for righe in -5 ... -1 {
        for i in 1 ... 11 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}
for colonne in 5 ... 12 {
    for righe in -1 ... -1 {
        for i in 1 ... 11 {
            world.place(Block(), at: Coordinate(column: colonne, row: righe))
        }
        
    }
    
}

// mettendo le acque

for colonne in 0 ... 3 {
    for righe in -1 ... -1 {
        world.place(Water(), at: Coordinate(column: colonne, row: righe))
    }
    
}

for colonne in 8 ... 11 {
    for righe in 12 ... 12 {
        world.place(Water(), at: Coordinate(column: colonne, row: righe))
    }
    
}
for colonne in 12 ... 13 {
    for righe in 1 ... 10 {
        world.place(Water(), at: Coordinate(column: colonne, row: righe))
    }
    
}
for colonne in -2 ... -1 {
    for righe in 1 ... 10 {
        world.place(Water(), at: Coordinate(column: colonne, row: righe))
    }
    
}

// mettendo le gemme e le porte

world.place(Portal(color: #colorLiteral(red: 0.9098039269447327, green: 0.47843137383461, blue: 0.6431372761726379, alpha: 1.0)), between: Coordinate(column: 10, row: 14),and:Coordinate(column: 12, row: 11))
world.place(Gem(), at: Coordinate(column: 14, row: 11))
world.place(Gem(), at: Coordinate(column: 14, row: 0))
world.place(Gem(), at: Coordinate(column: 12, row: 0))
world.place(Gem(), at: Coordinate(column: 12, row: -1))
world.place(Gem(), at: Coordinate(column: 4, row: -1))
world.place(Gem(), at: Coordinate(column: 4, row: -6))
world.place(Gem(), at: Coordinate(column: -1, row: -6))
world.place(Gem(), at: Coordinate(column: -1, row: 0))
world.place(Gem(), at: Coordinate(column: -3, row: 0))
world.place(Gem(), at: Coordinate(column: -3, row: 11))
world.place(Gem(), at: Coordinate(column: -1, row: 11))
world.place(Gem(), at: Coordinate(column: -1, row: 12))
world.place(Gem(), at: Coordinate(column: 7, row: 12))
world.place(Gem(), at: Coordinate(column: 7, row: 17))
world.place(Gem(), at: Coordinate(column: 12, row: 17))
world.place(Portal(color: #colorLiteral(red: 0.5215686559677124, green: 0.10980392247438431, blue: 0.05098039284348488, alpha: 1.0)), between: Coordinate(column: 12, row: 12), and: Coordinate(column: 10, row: 13))
world.place(Portal(color: #colorLiteral(red: 0.1764705926179886, green: 0.49803921580314636, blue: 0.7568627595901489, alpha: 1.0)), between: Coordinate(column: -1, row: -1), and: Coordinate(column: -1, row: -2))






</string>
			<key>ModifiedRange</key>
			<string>{2545, 11358}</string>
			<key>OriginalContent</key>
			<string>let hopper = Character(name: .hopper)
world.place(hopper, at: Coordinate(column: 1, row: 1))
</string>
			<key>OriginalRange</key>
			<string>{2545, 93}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
