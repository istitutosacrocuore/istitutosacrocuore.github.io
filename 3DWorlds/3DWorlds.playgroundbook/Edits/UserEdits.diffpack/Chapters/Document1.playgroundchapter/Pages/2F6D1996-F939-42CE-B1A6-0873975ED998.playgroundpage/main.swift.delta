<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Document1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>// Di Matteo Pen
// in questo livello dobbiamo raccoglie due gemme e accendere un interruttore, i personaggi sono chiusi nel labrinto, per terminare il livello i personaggi devono collaborare insieme.

let corners = [
    Coordinate(column: 3, row: 11),
    Coordinate(column: 3, row: 10),
    Coordinate(column: 3, row: 8),
    Coordinate(column: 3, row: 7),
    Coordinate(column: 2, row: 7),
    Coordinate(column: 1, row: 7),
    Coordinate(column: 0, row: 7),
    Coordinate(column: 8, row: 11),
    Coordinate(column: 8, row: 10),
    Coordinate(column: 8, row: 8),
    Coordinate(column: 8, row: 7),
    Coordinate(column: 9, row: 7),
    Coordinate(column: 10, row: 7),
    Coordinate(column: 11, row: 7),
    Coordinate(column: 11, row: 4),
    Coordinate(column: 10, row: 4),
    Coordinate(column: 9, row: 4),
    Coordinate(column: 8, row: 4),
    Coordinate(column: 8, row: 3),
    Coordinate(column: 8, row: 1),
    Coordinate(column: 8, row: 0),
    Coordinate(column: 3, row: 4),
    Coordinate(column: 3, row: 3),
    Coordinate(column: 3, row: 1),
    Coordinate(column: 3, row: 0),
    Coordinate(column: 2, row: 4),
    Coordinate(column: 1, row: 4),
    Coordinate(column: 0, row: 4),
    Coordinate(column: 6, row: 9),
    Coordinate(column: 6, row: 8),
    Coordinate(column: 5, row: 9),
    Coordinate(column: 5, row: 8),
    Coordinate(column: 6, row: 3),
    Coordinate(column: 5, row: 3),
    Coordinate(column: 2, row: 6),
    Coordinate(column: 2, row: 5),
    Coordinate(column: 1, row: 6),
    Coordinate(column: 1, row: 5),
    Coordinate(column: 10, row: 6),
    Coordinate(column: 10, row: 5),
    Coordinate(column: 9, row: 6),
    Coordinate(column: 9, row: 5),
    Coordinate(column: 6, row: 6),
    Coordinate(column: 6, row: 5),
    Coordinate(column: 5, row: 6),
    Coordinate(column: 5, row: 5),
]
for coordinate in corners {
    for i in 1 ... 5 {
        world.place(Block(), at: coordinate)
    }
}

var sea : [Coordinate]=[]
sea.append(Coordinate(column: 0, row: 6))
sea.append(Coordinate(column: 0, row: 5))
sea.append(Coordinate(column: 11, row: 6))
sea.append(Coordinate(column: 11, row: 5))
sea.append(Coordinate(column: 7, row: 9))
for coordinate in sea{
    world.removeBlock(atColumn: 0, row: 6)
    world.place(Water(), at: coordinate)
    world.removeBlock(atColumn: 0, row: 5)
    world.place(Water(), at: coordinate)
    world.removeBlock(atColumn: 11, row: 6)
    world.place(Water(), at: coordinate)
    world.removeBlock(atColumn: 11, row: 5)
    world.place(Water(), at: coordinate)
    world.removeBlock(atColumn: 7, row: 9)
    world.place(Water(), at: coordinate)
}

</string>
			<key>ModifiedRange</key>
			<string>{2545, 2631}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{2545, 0}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>world.place(hopper, facing:west ,at: Coordinate(column: 10, row: 9))

let blu = Character(name: .blu)
world.place(blu, facing: east, at: Coordinate(column: 1, row: 2))

let byte = Character(name: .byte)
world.place(byte, facing:west, at: Coordinate(column:10, row: 2))

let expert = Expert()
world.place(expert, facing:east, at: Coordinate(column: 1, row: 9))

let coordinate2 = world.coordinates(inColumns: [4,5,6,7,], intersectingRows: [10,11,1,0])
for coordinate in coordinate2 {
    world.removeBlock(at:coordinate)
    world.placeWater(at:[coordinate])
}

let coordinate3 = world.coordinates(inColumns: [4,7], intersectingRows: [3,4,5,6,7,8])
for coordinate in coordinate3 {
    world.removeBlock(at:coordinate)
    world.placeWater(at:[coordinate])
}

let blueLock = PlatformLock(color: #colorLiteral(red: 0.25882354378700256, green: 0.7568627595901489, blue: 0.9686274528503418, alpha: 1.0))
world.place(blueLock, facing: west, at: Coordinate(column: 4, row: 9))
world.place(Platform(onLevel: 2, controlledBy: blueLock), at: Coordinate(column: 7, row: 9))
let corners2 = [
    Coordinate(column: 3, row: 2)]
for coordinate in corners2 {
    world.place(Block(), at: coordinate)
}

let corners3 = [
    Coordinate(column: 4, row: 2)]
for coordinate in corners3 {
    for i in 1 ... 2 {
        world.place(Block(), at: coordinate)
    }
}
let corners4 = [
    Coordinate(column: 5, row: 2),]
for coordinate in corners4 {
    
    
    for i in 1 ... 3 {
        world.place(Block(), at: coordinate)
    }
}

let corners5 = [
    Coordinate(column: 6, row: 2),]
for coordinate in corners5 {
    for i in 1 ... 4 {
        world.place(Block(), at: coordinate)
    }
}

world.place(Stair(),facing:west,  at:Coordinate(column: 2, row: 2))
world.place(Stair(),facing:west,  at:Coordinate(column: 3, row: 2))
world.place(Stair(),facing:west,  at:Coordinate(column: 4, row: 2))
world.place(Stair(),facing:west,  at:Coordinate(column: 5, row: 2))
world.place(Stair(),facing:west,  at:Coordinate(column: 6, row: 2))

world.place(Portal(color: #colorLiteral(red: 0.9254902005195618, green: 0.23529411852359772, blue: 0.10196078568696976, alpha: 1.0)), between: Coordinate(column: 7, row: 2), and: Coordinate(column: 6, row: 5))
world.place(Gem(), at: Coordinate(column: 5, row: 6))
world.place(Switch(),at: Coordinate(column: 5, row: 8))
world.place(Gem(), at: Coordinate(column: 5, row: 6))
world.place(Gem(), at: Coordinate(column: 5, row: 3))
</string>
			<key>ModifiedRange</key>
			<string>{5214, 2442}</string>
			<key>OriginalContent</key>
			<string>world.place(hopper, at: Coordinate(column: 1, row: 1))
</string>
			<key>OriginalRange</key>
			<string>{2583, 55}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
