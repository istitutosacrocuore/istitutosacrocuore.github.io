<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Document1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/* Francesca Cappuccio*/
/* ho realizzato un giardino come mondo ed ho giocato sull'apparizzione di oggetti come blocchi o gemme, ed i personaggi sui pilastri sono a casuali */
var number = 4
var row = world.coordinates(inRows: [0,11] )
var column = world.coordinates(inColumns: [0, 11])
for allCoordinates in row{ world.place(Block(), at: allCoordinates)}
for allCoordinates in column {world.place(Block(), at: allCoordinates)}
let lakeh = world.coordinates(inColumns: [4,5,6,7], intersectingRows: [4,5,6,7])
for Coordinates in lakeh {
    world.removeBlock(at: Coordinates)
    world.place(Water(), at: Coordinates)
}
let superWall = world.coordinates(inColumns: [9,8,7,6,5,4,3,2], intersectingRows: [2])
let ultraWall = world.coordinates(inColumns: [9], intersectingRows: [2,3,4,5,6,7,8,9])
for Coordinates in superWall{
    world.place(Wall(), facing: north, at: Coordinates)
}
for Coordinates in ultraWall {
    world.place(Wall(), facing: west, at: Coordinates)
}
let hyperWall = world.coordinates(inColumns: [9,8,7,6,5,4,3,2], intersectingRows: [9])
for Coordinates in hyperWall {
    world.place(Wall(), facing: south, at: Coordinates)
}
let walll = world.coordinates(inColumns: [2], intersectingRows: [2,3,4,5,6,7,8,9])
for Coordinates in walll {
    world.place(Wall(), facing: east, at: Coordinates)
}
let towers = world.coordinates(inColumns: [0,11], intersectingRows: [11,0])
for Coordinates in towers {
    for i in 1...7 {
        world.place(Block(), at: Coordinates)
    }
}
var coords1: [Coordinate] = world.coordinates(inRows: [0])
var coords2: [Coordinate] = world.coordinates(inRows: [0])
var coords3: [Coordinate] = world.coordinates(inRows: [0])
var coords4: [Coordinate] = world.coordinates(inRows: [0])
let RNG = randomInt(from: 0, to: 3)
if RNG == 0 {
    coords1 = world.coordinates(inColumns: [0], intersectingRows: [0])
    coords2 = world.coordinates(inColumns: [11], intersectingRows: [0])
    coords3 = world.coordinates(inColumns: [11], intersectingRows: [11])
    coords4 = world.coordinates(inColumns: [0], intersectingRows: [11])
}
if RNG == 1 {
    coords1 = world.coordinates(inColumns: [11], intersectingRows: [0])
    coords2 = world.coordinates(inColumns: [11], intersectingRows: [11])
    coords3 = world.coordinates(inColumns: [0], intersectingRows: [11])
    coords4 = world.coordinates(inColumns: [0], intersectingRows: [0])
}
if RNG == 3 {
    coords1 = world.coordinates(inColumns: [11], intersectingRows: [11])
    coords2 = world.coordinates(inColumns: [0], intersectingRows: [11])
    coords3 = world.coordinates(inColumns: [0], intersectingRows: [0])
    coords4 = world.coordinates(inColumns: [11], intersectingRows: [0])
}
if RNG == 2 {
    coords1 = world.coordinates(inColumns: [0], intersectingRows: [11])
    coords2 = world.coordinates(inColumns: [0], intersectingRows: [0])
    coords3 = world.coordinates(inColumns: [11], intersectingRows: [0])
    coords4 = world.coordinates(inColumns: [11], intersectingRows: [11])
}
for Coordinates in coords1 {
    world.place(Expert(), at: Coordinates)
}
for Coordinates in coords2 {
    world.place(Character(name: .hopper), at: Coordinates)
}
for Coordinates in coords3 {
    world.place(Character(name: .blu), at: Coordinates)
}
for Coordinates in coords4 {
    world.place(Character(name: .byte), at: Coordinates)
}
let character = Character(name: .hopper)
world.place(character, at: Coordinate(column: 3, row: 8))
world.place(Switch(), at: Coordinate(column: 9, row: 5))
let gems = world.coordinates(inColumns: [0,11], intersectingRows: [1,10])
for Coordinates in gems {
    world.placeGems(at: [Coordinates])
}
func move(distance: Int, turning: Int) {
    if distance != 0{
        for i in 1...distance{
            if character.isBlocked {
                character.jump()
            }else{
                character.moveForward()}
            if character.isOnGem {
                character.collectGem()
                world.placeBlocks(at: world.coordinates(inColumns: [number], intersectingRows: [5,6]))
                number += 1
                if number == 8 {
                    world.placeGems(at:
                        world.coordinates(inColumns: [5,6], intersectingRows: [6,5]))
                }
            }
            if character.isOnClosedSwitch {
                character.toggleSwitch()
                world.removeItems(at: world.coordinates(inColumns: [9], intersectingRows: [4,6]))
            }
        }
    }
    if turning != 0 {
        for i in 1...turning {
            character.turnLeft()
        }
    }
}
//'''''''''''''''
character.turnLeft()
move(distance: 7, turning: 3)
move(distance: 4, turning: 1)
move(distance: 3, turning: 3)
move(distance: 4, turning: 2)
move(distance: 9, turning: 1)
move(distance: 11, turning: 1)
move(distance: 9, turning: 1)
//6;0 = south 

</string>
			<key>ModifiedRange</key>
			<string>{2545, 4819}</string>
			<key>OriginalContent</key>
			<string>let hopper = Character(name: .hopper)
world.place(hopper, at: Coordinate(column: 1, row: 1))
</string>
			<key>OriginalRange</key>
			<string>{2545, 93}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
