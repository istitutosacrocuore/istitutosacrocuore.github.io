<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Document1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>// MARTINA MANZO: Expert si teletrasporta da un punto all'altro. Hopper percorre la colonna fatta da scalini, si teletrasporta vicino a Expert e insieme fanno un  balletto. Blu si teletrasporta sull'isola, la percorre e raccoglie la gemma. Expert poi si teletrasporta sulla montagnetta, la percorre e raccoglie la gemma.

let expert1 = Expert ()
world.place(expert1, facing: .north, at: Coordinate (column: 3, row: 2))
</string>
			<key>ModifiedRange</key>
			<string>{2545, 419}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{2545, 0}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>world.place(hopper, facing: .south, at: Coordinate(column: 4, row: 4))
func move(distance: Int) {
    for i in 1 ... distance {
        hopper.jump()
    }
    
}
let block = Block()
world.place(block, at: Coordinate(column: 2, row: 4))
let block2 = Block()
world.place(block2, at: Coordinate(column: 2, row: 4))
let wall1 = Wall()
world.place(wall1, facing: .north, at: Coordinate(column: 4, row: 8))
let portal1 = Portal(color: #colorLiteral(red: 0.8078431487083435, green: 0.027450980618596077, blue: 0.3333333432674408, alpha: 1.0))
world.place(portal1, between: Coordinate(column: 3, row: 3), and: Coordinate(column: 9, row: 6))
let portal2 = Portal(color: #colorLiteral(red: 0.21960784494876862, green: 0.007843137718737125, blue: 0.8549019694328308, alpha: 1.0))
let portal3 = Portal(color: #colorLiteral(red: 0.9529411792755127, green: 0.686274528503418, blue: 0.13333334028720856, alpha: 1.0))
expert1.moveForward()
world.place(Block(), at: Coordinate(column: 4, row: 3))
for i in 1 ... 2 {
    world.place(Block(), at: Coordinate(column: 4, row: 2))
}
for i in 1 ... 3 {
    world.place(Block(), at: Coordinate(column: 4, row: 1))
}
for i in 1 ... 4 {
    world.place(Block(), at: Coordinate(column: 4, row: 0))
}
for i in 1 ... 5 {
    world.place(Block(), at: Coordinate(column: 3, row: 0))
}
for i in 1 ... 6 {
    world.place(Block(), at: Coordinate(column: 3, row: 1))
}
for i in 1 ... 7 {
    world.place(Block(), at: Coordinate(column: 3, row: 2))
}
for i in 1 ... 8 {
    world.place(Block(), at: Coordinate(column: 2, row: 2))
}
for i in 1 ... 9 {
    world.place(Block(), at: Coordinate(column: 1, row: 2))
}
for i in 1 ... 10 {
    world.place(Block(), at: Coordinate(column: 0, row: 2))
}
for i in 1 ... 11 {
    world.place(Block(), at: Coordinate(column: 0, row: 3))
}
for i in 1 ... 12 {
    world.place(Block(), at: Coordinate(column: 0, row: 4))
}
world.removeBlock(atColumn: 2, row: 0)
world.removeBlock(atColumn: 1, row: 0)
world.removeBlock(atColumn: 0, row: 0)
world.removeBlock(atColumn: 2, row: 1)
world.removeBlock(atColumn: 1, row: 1)
world.removeBlock(atColumn: 0, row: 1)
world.placeWater(at: [Coordinate(column: 2, row: 0)])
world.placeWater(at: [Coordinate(column: 1, row: 0)])
world.placeWater(at: [Coordinate(column: 0, row: 0)])
world.placeWater(at: [Coordinate(column: 2, row: 1)])
world.placeWater(at: [Coordinate(column: 1, row: 1)])
world.placeWater(at: [Coordinate(column: 0, row: 1)])

world.place(portal2, between: Coordinate(column: 0, row: 4), and: Coordinate(column: 8, row: 6))

move(distance: 4)
hopper.turnRight()
hopper.jump()
hopper.turnRight()
move(distance: 2)
hopper.turnLeft()
move(distance: 3)
hopper.turnRight()
move(distance: 2)
expert1.danceLikeNoOneIsWatching()
hopper.danceLikeNoOneIsWatching()

let coords = world.coordinates(inColumns: [11, 10, 9], intersectingRows: [11, 10, 9])
for coor in coords {
    for i in 1...3 {
        world.place(Block(), at: coor)
    }
}
world.removeBlock(atColumn: 8, row: 11)
world.removeBlock(atColumn: 8, row: 10)
world.removeBlock(atColumn: 8, row: 9)
world.removeBlock(atColumn: 11, row: 8)
world.removeBlock(atColumn: 10, row: 8)
world.removeBlock(atColumn: 9, row: 8)
world.placeWater(at: [Coordinate(column: 8, row: 11)])
world.placeWater(at: [Coordinate(column: 8, row: 10)])
world.placeWater(at: [Coordinate(column: 8, row: 9)])
world.placeWater(at: [Coordinate(column: 11, row: 8)])
world.placeWater(at: [Coordinate(column: 10, row: 8)])
world.placeWater(at: [Coordinate(column: 9, row: 8)])
world.place(portal3, between: Coordinate(column: 11, row: 6), and: Coordinate(column: 11, row: 0))
world.place(Gem(), at: Coordinate(column: 9, row: 0))

world.place(Block(), at: Coordinate(column: 9, row: 9))
world.place(Stair(), facing: north, at: Coordinate(column: 9, row: 10))
world.place(Gem(), at: Coordinate(column: 9, row: 9))

let portal = Portal(color: #colorLiteral(red: 0.4028071761, green: 0.7315050364, blue: 0.2071235478, alpha: 1))
world.place(portal, atStartColumn: 2, startRow: 3, atEndColumn: 11, endRow: 9)


let blu = Character(name: .blu)
world.place(blu, at: Coordinate(column: 1, row: 3))
blu.turnLeft()
blu.moveForward()
blu.turnLeft()
blu.move(distance: 2)
blu.turnLeft()
blu.move(distance: 2)
blu.turnLeft()
blu.move(distance: 2)
blu.collectGem()

let coordz = world.coordinates(inColumns: [11, 10, 9], intersectingRows: [0, 1, 2])
for coor in coordz {
    for i in 1...3 {
        world.place(Block(), at: coor)
    }
}

expert1.turnRight()
for i in 1 ... 2 {
    expert1.moveForward()
}
expert1.turnLeft()

for i in 1 ... 2 {
    expert1.moveForward()
}
expert1.turnLeft()
for i in 1 ... 2 {
    expert1.moveForward()
}
expert1.turnLeft()
for i in 1 ... 2 {
    expert1.moveForward()
}
expert1.collectGem()
</string>
			<key>ModifiedRange</key>
			<string>{3002, 4741}</string>
			<key>OriginalContent</key>
			<string>world.place(hopper, at: Coordinate(column: 1, row: 1))
</string>
			<key>OriginalRange</key>
			<string>{2583, 55}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
