<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Document1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>var swicth1 = Switch(open: true)
world.place(swicth1, at: Coordinate(column: 2, row: 2))
let octet = Character(name: .blu)
world.place(octet, at: Coordinate(column: 6, row: 6))
for colonne in 0 ... 4 {
    for righe in -5 ... -2 {
        world.place(Block(), at: Coordinate(column: colonne, row: righe))
    }
}

for colonne in 8 ... 12 {
    for righe in 13 ... 16 {
        world.place(Block(), at: Coordinate(column: colonne, row: righe))
    }
}

for colonne in 9 ... 11 {
    for righe in 14 ... 15 {
        world.removeBlock(atColumn: colonne, row: righe)
        world.place(Water(), at: Coordinate(column: colonne, row: righe))
    }
}

let coordinates = world.allPossibleCoordinates

let wall = Wall(edges: [.bottom, .top, .right, .left])

let wall1 = Wall(edges: [.top])
let wall2 = Wall(edges: [.top])
let wall3 = Wall(edges: [.left])
let wall4 = Wall(edges: [.left])
let wall5 = Wall(edges: [.bottom])
let wall6 = Wall(edges: [.bottom])
let wall7 = Wall(edges: [.right])
let wall8 = Wall(edges: [.right])
let wall12 = world.place(Wall(), facing: .south, at: Coordinate(column: 9, row: 13))
let wall13 = world.place(Wall(), facing: .north, at: Coordinate(column: 9, row: 16))

world.place(wall1, at: Coordinate(column: 11, row: 13))
world.place(wall2, at: Coordinate(column: 10, row: 13))
world.place(wall3, at: Coordinate(column: 12, row: 14))
world.place(wall4, at: Coordinate(column: 12, row: 15))
world.place(wall5, at: Coordinate(column: 11, row: 16))
world.place(wall6, at: Coordinate(column: 10, row: 16))
world.place(wall7, at: Coordinate(column: 8, row: 14))
world.place(wall8, at: Coordinate(column: 8, row: 15))
world.placeBlocks(at: world.coordinates(inColumns: [6], intersectingRows: [4,3,2,1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [6], intersectingRows: [3,2,1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [6], intersectingRows: [2,1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [6], intersectingRows: [1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [6], intersectingRows: [0]))
world.placeBlocks(at: world.coordinates(inColumns: [5], intersectingRows: [4,3,2,1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [5], intersectingRows: [3,2,1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [5], intersectingRows: [2,1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [5], intersectingRows: [1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [5], intersectingRows: [0]))
world.placeBlocks(at: world.coordinates(inColumns: [7], intersectingRows: [4,3,2,1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [7], intersectingRows: [3,2,1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [7], intersectingRows: [2,1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [7], intersectingRows: [1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [7], intersectingRows: [0]))
world.placeBlocks(at: world.coordinates(inColumns: [8], intersectingRows: [4,3,2,1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [8], intersectingRows: [3,2,1,0]))

world.placeBlocks(at: world.coordinates(inColumns: [8], intersectingRows: [2,1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [8], intersectingRows: [1,0]))
world.placeBlocks(at: world.coordinates(inColumns: [8], intersectingRows: [0]))
world.placeGems(at: world.coordinates(inColumns: [6,7,0], intersectingRows: [0]))
world.place(Portal(color: #colorLiteral(red: 1.0, green: 0.0, blue: 0.0, alpha: 1.0)), between: Coordinate(column: 6, row: 1), and: Coordinate(column: 0, row: 1))
octet.moveForward()

for i in 1 ... 3 {
    
    octet.jump()
}
octet.turnLeft()
octet.moveForward()
octet.turnRight()
octet.jump()
octet.jump()
octet.collectGem()
octet.turnRight()
octet.moveForward()
octet.collectGem()
octet.turnRight()
octet.jump()
octet.turnRight()
octet.turnRight()
octet.moveForward()
octet.collectGem()
</string>
			<key>ModifiedRange</key>
			<string>{2545, 3889}</string>
			<key>OriginalContent</key>
			<string>let hopper = Character(name: .hopper)
world.place(hopper, at: Coordinate(column: 1, row: 1))
</string>
			<key>OriginalRange</key>
			<string>{2545, 93}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
