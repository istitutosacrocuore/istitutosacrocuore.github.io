/*
//-------------------------------------------------------------------------------------------
//PLAYGROUND N.1
 
//Autore:
//Alessandro Cibelli

let hopper = Character(name: .hopper)
world.place(hopper, at: Coordinate(column: 5, row: 7));

let coords = world.coordinates(inColumns: [9, 10, 11], intersectingRows: [9, 10, 11])
for coor in coords {
    for i in 1...8 {
        world.place(Block(), at: coor)
    }
}
let torre = world.coordinates(inColumns: [9, 10, 11], intersectingRows: [0, 1, 2])
for torre in torre {
    for i in 1...8 {
        world.place(Block(), at: torre)
    }
}
let corgi = world.coordinates(inColumns: [0, 1, 2], intersectingRows: [0, 1, 2])
for corgi in corgi {
    for i in 1...8 {
        world.place(Block(), at: corgi)
    }
}
let torre2 = world.coordinates(inColumns: [0, 1, 2], intersectingRows: [9, 10, 11])
for torre in torre2 {
    for i in 1...8 {
        world.place(Block(), at: torre)
    }
}
let water1 = world.row(5)
let water2 = world.row(6)
for Coordinates in water1{
    world.removeAllBlocks(at: Coordinates)
    world.place(Water(), at: Coordinates)
}
for Coordinates in water2{
    world.removeAllBlocks(at: Coordinates)
    world.place(Water(), at: Coordinates)
}
world.place(Portal(color: #colorLiteral(red: 0.0, green: 0.0, blue: 0.5, alpha: 1.0)), between: Coordinate(column: 10, row: 10), and: Coordinate(column: 10, row: 1))
var piaggio = 3
for i in 1 ... 6 {
    world.place(Platform(onLevel: 9, controlledBy: PlatformLock(color: #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0))), at: Coordinate(column: 1, row: piaggio))
    piaggio += 1
}
world.placeGems(at: [Coordinate(column: 10, row: 0)])
world.place(Portal(color: #colorLiteral(red: 0.5, green: 0.0, blue: 0.5, alpha: 1.0)), between: Coordinate(column: 6, row: 7), and: Coordinate(column: 6, row: 4))
world.place(Portal(color: #colorLiteral(red: 0.5, green: 0.0, blue: 0.0, alpha: 1.0)), between: Coordinate(column: 1, row: 1), and: Coordinate(column: 8, row: 2))
world.place(Portal(color: #colorLiteral(red: 0.5, green: 0.5, blue: 0.0, alpha: 1.0)), between: Coordinate(column: 10, row: 10), and: Coordinate(column: 1, row: 10))
let Gem = world.placeGems(at: [Coordinate(column: 10, row: 11)])
func move(distance: Int) {
    for i in 1...distance{
        if hopper.isBlocked {
            hopper.jump()
        }else{
            hopper.moveForward()
        }
    }
}
hopper.turnLeft()
move(distance: 3)
hopper.turnRight()
move(distance: 2)
hopper.turnLeft()
hopper.turnLeft()
move(distance: 10)
hopper.collectGem()
hopper.turnLeft()
hopper.turnLeft()
move(distance:2 )
hopper.collectGem()

//FINE PLAYGROUND N.1
//-------------------------------------------------------------------------------------------
*/


/*
//-------------------------------------------------------------------------------------------
//PLAYGROUND N.2
 
 //Autore:
 //Fabrizio Iodice

for colonne in 0 ... 4 {
    for righe in -5 ... -2 {
        world.place(Block(), at: Coordinate(column: colonne, row: righe))
    }
}

for colonne in 8 ... 11 {
    for righe in 13 ... 15 {
        world.place(Block(), at: Coordinate(column: colonne, row: righe))
    }
}
let allCoordinates = world.allPossibleCoordinates
var heights: [Int] = []

var island : [Coordinate] = []
var sea : [Coordinate] = []


for i in 1 ... 20 {
    let localnumber = randomInt(from: 0, to: 12)
    heights.append(localnumber)
}

for coordinate in allCoordinates {
    if coordinate.column > 2 && coordinate.column < 9 && coordinate.row > 2 &&
        coordinate.row < 9
    {
        island.append(coordinate)
    } else {
        sea.append(coordinate
        )
    }
}
var index = 0
for coordinate in island {
    if index == heights.count {
        index = 0
    }
    var currentHeight = heights[index]
    if currentHeight == 0 {
    } else {
        for i in 1...currentHeight {
            world.place(Block(), at: coordinate)
        }
        if currentHeight > 10 {
        } else if coordinate.column >= 3 && coordinate.column < 6 {
        }
    }
    index += 1
}
for coordiante in sea {
    world.removeBlock(atColumn: coordiante.column, row: coordiante.row)
    world.place(Water(), at: coordiante)
    
}

let portal = Portal(color:#colorLiteral(red: 0.21960784494876862, green: 0.007843137718737125, blue: 0.8549019694328308, alpha: 1.0) )
world.place(portal, atStartColumn: 0,startRow: -4, atEndColumn: 11,endRow: 15)
let platformlockred = PlatformLock(color: #colorLiteral(red: 0.7450980544090271, green: 0.1568627506494522, blue: 0.07450980693101883, alpha: 1.0))
world.place(platformlockred, at: Coordinate(column: 8, row: 15))

world.place(Platform(onLevel: 1, controlledBy: platformlockred), at: Coordinate(column: 8, row: 12
))
let expert = Expert()
world.place(expert, at: Coordinate(column: 8, row: 14))
let byte = Character(name: .byte)
world.place(byte, at: Coordinate(column: 4, row: -2))
let platformlockred1 = PlatformLock(color: #colorLiteral(red: 0.34117648005485535, green: 0.6235294342041016, blue: 0.16862745583057404, alpha: 1.0))
world.place(platformlockred1, at: Coordinate(column: 9, row: 15))

world.place(Platform(onLevel: 1, controlledBy: platformlockred1), at: Coordinate(column: 8, row: 11
))
let platformlockred2 = PlatformLock(color: #colorLiteral(red: 0.9607843160629272, green: 0.7058823704719543, blue: 0.20000000298023224, alpha: 1.0))
world.place(platformlockred2, at: Coordinate(column: 10, row: 15))

world.place(Platform(onLevel: 1, controlledBy: platformlockred2), at: Coordinate(column: 8, row: 10
))
let platformlockred3 = PlatformLock(color: #colorLiteral(red: 0.239215686917305, green: 0.6745098233222961, blue: 0.9686274528503418, alpha: 1.0))
world.place(platformlockred3, at: Coordinate(column: 11, row: 13))

world.place(Platform(onLevel: 1, controlledBy: platformlockred3), at: Coordinate(column: 8, row: 9
))
let gem = Gem()
world.place(gem, at: Coordinate(column: 8, row: 9))
let gemcuonter = 1

//FINE PLAYGROUND N.2
//-------------------------------------------------------------------------------------------
*/
 
 
 
 
/*
//-------------------------------------------------------------------------------------------
//PLAYGROUND N.3
 
 //Autore:
 //Luca Bernasconi
 
let coordinate = world.coordinates(inColumns: [0,1,2,3,4,5,6,7,8,9,10,11], intersectingRows: [11,10])
let allCoordinates = world.allPossibleCoordinates
var sea : [Coordinate] = []
for coordinate in allCoordinates {
    sea.append(coordinate)
    world.removeBlock(at: coordinate)
    world.placeWater(at: [coordinate])
    
}
for coordinate in coordinate {
    world.removeBlock(at:coordinate)
}
var coordinate2 = world.coordinates(inColumns: [0,1,2,3,4,5,6,7,8,9,10,11], intersectingRows: [4,5,6,7])
for coordinate in coordinate2{
    world.placeBlocks(at: [coordinate])
}
var coordinate3 = world.coordinates(inColumns: [4,5,6,7], intersectingRows: [0,1,2,3,4,5,6,7,8,9,10,11])
for coordinte in coordinate3 {
    world.placeBlocks(at: [coordinte])
}
//collocamento delle scale
world.place(Stair(),facing: west, at: Coordinate(column: 3, row: 6))
world.place(Stair(),facing: west, at: Coordinate(column: 3, row: 5))
world.place(Stair(),facing: east, at: Coordinate(column: 8, row: 5))
world.place(Stair(),facing: east, at: Coordinate(column: 8, row: 6))
world.place(Stair(),facing: south, at: Coordinate(column: 6, row: 3))
world.place(Stair(),facing: south, at: Coordinate(column: 5, row: 3))
world.place(Stair(),facing: north, at: Coordinate(column: 6, row: 8))
world.place(Stair(),facing: north, at: Coordinate(column: 5, row: 8))
var coordinate4 = world.coordinates(inColumns: [4,5,6,7], intersectingRows: [7,6,5,4])
for coordinate in coordinate4{
    for i in 1 ... 10 {
        
        
        world.placeBlocks(at: [coordinate])
    }
}
//piazzamento dei portali
let orangeportal = Portal(color:  #colorLiteral(red: 0.9254902005195618, green: 0.23529411852359772, blue: 0.10196078568696976, alpha: 1.0))
world.place(orangeportal, atStartColumn: 8, startRow: 5, atEndColumn:
    5, endRow: 4)
let blackportal = Portal(color:  #colorLiteral(red: 0.0, green: 0.0, blue: 0.0, alpha: 1.0))
world.place(blackportal, atStartColumn: 3, startRow: 5, atEndColumn: 6, endRow: 4)
world.place(Switch(), at: Coordinate(column: 11, row: 4))
world.place(Gem(), at: Coordinate(column: 5, row: 6))
//inizializzazione e piazzamento del personaggio
let byte = Character(name: .byte)
world.place(byte, facing: east, at: Coordinate(column: 0, row: 5))
let expert = Expert()
let coordinate5 = world.coordinates(inColumns: [11,10,9], intersectingRows: [11,10,9])
for coordinate in  coordinate5  {
    world.placeBlocks(at: [coordinate])
}
// aggiunta delle piattaforme
world.place(expert,facing:south, at: Coordinate(column: 11, row: 10))
let platformLockBlue = PlatformLock(color: #colorLiteral(red: 0.21960784494876862, green: 0.007843137718737125, blue: 0.8549019694328308, alpha: 1.0))
world.place(platformLockBlue,facing: north, at: Coordinate(column: 11, row: 9))
world.place(Platform(onLevel: 1, controlledBy: platformLockBlue), at: Coordinate(column: 10, row: 3))
world.place(Platform(onLevel: 1, controlledBy: platformLockBlue), at: Coordinate(column: 9, row: 2))
world.place(Platform(onLevel: 1, controlledBy: platformLockBlue), at: Coordinate(column: 8, row: 1))
world.placeGems(at: [Coordinate(column: 5, row: 0)])

//FINE PLAYGROUND N.3
//-------------------------------------------------------------------------------------------
*/



 
/*
//-------------------------------------------------------------------------------------------
//PLAYGROUND N.4
 
 //Autore:
 //Marco Jin



for colonne in 0 ... 4 {
 for righe in -5 ... -2 {
 world.place(Block(), at: Coordinate(column: colonne, row: righe))
 }
 }
 
 for colonne in 8 ... 11 {
 for righe in 13 ... 15 {
 world.place(Block(), at: Coordinate(column: colonne, row: righe))
 }
 }
 
 */

let coordi = world.coordinates(inColumns: [9, 10, 11], intersectingRows: [2, 1, 0])
for coordi in coordi {
    for i in 1...10 {
        world.place(Block(), at: coordi)
    }
}
let coords = world.coordinates(inColumns: [11, 10, 9], intersectingRows: [11, 10, 9])
for coor in coords {
    for i in 1...10 {
        world.place(Block(), at: coor)
    }
}
let curtis = world.coordinates(inColumns: [0, 1, 2], intersectingRows: [9, 10, 11])
for curtis in curtis {
    for i in 1...10 {
        world.place(Block(), at: curtis)
    }
}
let curti = world.coordinates(inColumns: [0, 1, 2], intersectingRows: [0, 1, 2])
for curti in curti {
    for i in 1...10 {
        world.place(Block(), at: curti)
        
    }
}
let coordinate1 = world.coordinates(inColumns: [11,10,9,8,7], intersectingRows: [3,4])
for coordinate in coordinate1 {
    world.removeBlock(at: coordinate)
    world.placeWater(at: [coordinate])
}
let coordinate2 = world.coordinates(inColumns: [11,10,9,8,7], intersectingRows: [7,8])
for coordinate in coordinate2 {
    world.removeBlock(at: coordinate)
    world.placeWater(at: [coordinate])
}
let coordinate3 = world.coordinates(inColumns: [0,1,2,3,4], intersectingRows: [7,8])
for coordinate in coordinate3 {
    world.removeBlock(at: coordinate)
    world.placeWater(at: [coordinate])
}
let coordinate4 = world.coordinates(inColumns: [0,1,2,3,4], intersectingRows: [3,4])
for coordinate in coordinate4 {
    world.removeBlock(at: coordinate)
    world.placeWater(at: [coordinate])
}
let coordinate5 = world.coordinates(inColumns: [4,3], intersectingRows: [9,10,11])
for coordinate in coordinate5 {
    world.removeBlock(at: coordinate)
    world.placeWater(at: [coordinate])
}
let coordinate6 = world.coordinates(inColumns: [7,8], intersectingRows: [9,10,11])
for coordinate in coordinate6 {
    world.removeBlock(at: coordinate)
    world.placeWater(at: [coordinate])
}
let coordinate7 = world.coordinates(inColumns: [7,8], intersectingRows: [0,1,2])
for coordinate in coordinate7 {
    world.removeBlock(at: coordinate)
    world.placeWater(at: [coordinate])
}
let coordinate8 = world.coordinates(inColumns: [4,3], intersectingRows: [0,1,2])
for coordinate in coordinate8 {
    world.removeBlock(at: coordinate)
    world.placeWater(at: [coordinate])
}
world.placeBlocks(at: [Coordinate(column: 5, row: 5)])
world.placeBlocks(at: [Coordinate(column: 6, row: 5)])
world.placeBlocks(at: [Coordinate(column: 5, row: 6)])
world.placeBlocks(at: [Coordinate(column: 6, row: 6)])
world.place(Portal(color: #colorLiteral(red: 0.46666666865348816, green: 0.7647058963775635, blue: 0.2666666805744171, alpha: 1.0)), between: Coordinate(column: 6, row: 6), and: Coordinate(column: 10, row: 1))
world.place(Portal(color: #colorLiteral(red: 0.4745098054409027, green: 0.8392156958580017, blue: 0.9764705896377563, alpha: 1.0)), between: Coordinate(column: 10, row: 10), and: Coordinate(column: 5, row: 6))
world.place(Portal(color: #colorLiteral(red: 0.9254902005195618, green: 0.23529411852359772, blue: 0.10196078568696976, alpha: 1.0)), between: Coordinate(column: 5, row: 5), and: Coordinate(column: 1, row: 10))
world.place(Portal(color: #colorLiteral(red: 0.9607843160629272, green: 0.7058823704719543, blue: 0.20000000298023224, alpha: 1.0)), between: Coordinate(column: 6, row: 5), and: Coordinate(column: 1, row: 1))ù
let expert = Expert()
let blu = Character(name: .blu)
let byte = Character(name: .byte)
world.place(hopper, facing: west, at: Coordinate(column: 11, row: 6))
world.place(expert, facing: east, at: Coordinate(column: 0, row: 5))
world.place(byte, facing: north, at: Coordinate(column: 6, row: 0))
world.place(blu, facing: south, at: Coordinate(column: 5, row: 11))
world.placeGems(at: [Coordinate(column: 11, row: 10), Coordinate(column: 10, row: 11), Coordinate(column: 9, row: 10), Coordinate(column: 10, row: 9), Coordinate(column: 1, row: 9), Coordinate(column: 1, row: 11), Coordinate(column: 0, row: 10), Coordinate(column: 2, row: 10), Coordinate(column: 2, row: 1), Coordinate(column: 0, row: 1), Coordinate(column: 1, row: 0), Coordinate(column: 1, row: 2), Coordinate(column: 11, row: 1), Coordinate(column: 10, row: 0), Coordinate(column: 9, row: 1), Coordinate(column: 10, row: 2)])

//FINE PLAYGROUND N.4
//-------------------------------------------------------------------------------------------
*/
